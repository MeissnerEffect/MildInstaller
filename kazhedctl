#/usr/bin/bash

# Todo ajouter les metas durant build pour lancer l'update

# Name of the container and of the host
CNAME=gaming-container
CIDFILE=${CNAME}.cid
HNAME=$CNAME
INAME=kazhed/gaming-container
MESA_STABLE=17.2

# Set default optimisation to -O3 -march=native
OPTIMISE_DEFAULT=7

# Which directories have to be available inside container
VISIBLE_DIRECTORIES=( "$HOME" )

# Select which device drivers will be used in the container
JOYSTICK="/dev/input/js0"
VIDEOCARD="/dev/dri/card0"
DEVICE_DRIVERS=( $VIDEOCARD $JOYSTICK )

# Select which socket to replicate inside the container
SHAREDMEMORY="/dev/shm"
DBUS="/var/lib/dbus"
DBUS_SOCKET="/run/dbus/system_bus_socket"
DBUS_SESSION_BUS_ADDRESS="/run/user/${UID}/bus"
PULSE="/run/user/${UID}/pulse"
XSOCK=/tmp/.X11-unix
XAUTH=/tmp/.${CNAME}.xauth
MACHINE_ID="/etc/machine-id"

VISIBLE_SOCKETS=( $PULSE $DBUS_SESSION_BUS_ADDRESS $DBUS_SOCKET $DBUS $SHAREDMEMORY $XSOCK $XAUTH $MACHINE_ID)
declare -a APP_NAMES
APP_BASEDIR=/launcher
PLDAPP_BASEDIR="preload/${APP_BASEDIR}"

[ -d "$PLDAPP_BASEDIR" ] || mkdir -p  "$PLDAPP_BASEDIR"

# Comment faisait on avant les dictionnaires en bash? En perl, pardi!
# AFAIRE : Mettre les constantes en LS

# Couleurs
  noi=$(tput setaf 0);rou=$(tput setaf 1);ver=$(tput setaf 2) 
  mar=$(tput setaf 3);ble=$(tput setaf 4);vio=$(tput setaf 5)
  cya=$(tput setaf 6);bla=$(tput setaf 7);sms=$(tput smso)
  rms=$(tput rmso);rei=$(tput sgr0)

declare -A MAIN_COMMAND=(
    ["**build"]="Build image"
    ["**configure"]="Configure container"
    ["**install"]="Install applications"
    ["**start"]="Start/Restart container"
    ["**update"]="Update image"
    ["**prune"]="Remove everything"
    ["**dump"]="Dump packages"
    ["**help"]="This help"
    ["**uphelper"]="DEBUG: Update helpers"
)

declare -A COMPILER_OPTIONS=(
    ["--optimise=X"]="Use optimisation level 0<=X<=15"
    ["--clang"]="Build using CLANG"
)    

declare -A IMAGE_OPTIONS=(
    ["--experimental=wine,mesa,llvm"]="Use experimental version of packages [empty=all]"
)

declare -A DRIVER_OPTIONS=(
    ["--nine"]="Enable mesa and wine gallium-nine support"
    ["--intel"]="Enable modern intel support"
    ["--legacy=intel,radeon"]="Enable legacy radeon and intel drivers"
    ["--nouveau"]="Enable nouveau support"
    ["--radeon"]="Enable radeon support"
    ["--vulkan"]="Enable vulkan with intel or radeon"
)

declare -A APPLICATIONS=(
#    ["--decaf"]="Build decaf from git                        @ (https://github.com/decaf-emu/decaf-emu/)"
    ["--cemu"]="Install latest public version of CEMU @ (http://cemu.info)"
#    ["--rpcs3"]="Build RPCS3 from git                        @ (https://rpcs3.net)"
    ["--dolphin"]="Build Dolphin from git                    @ (https://dolphin-emu.org/)"
#    ["--citra"]="Build Citra from git                        @ (https://citra-emu.org)"
#    ["--steam"]="Install steam                               @ (https://store.steampowered.com/)"
#    ["--wsteam"]="Install steam (wine)                   @ (https://store.steampowered.com/)"
)

declare -A CONTAINER_SETUP=(
    ["--add-dir=X"]="Add the X directory in the container"
    ["--add-device=X"]="Add the char device X in the container"
#    ["--use-cpu=X,Y,Z"]="Use only enumerated CPU"
#    ["--max-ram=X"]="Hard memory limit"S
#    ["--max-swap=X,Y"]="Use max swap and define swapiness"
)

# Display 
function socket_setup {
# Setup X11 display

    echo "Creating X11 socket"
    touch $XAUTH
    DISPLAY=:0.0
    xauth nlist $DISPLAY | sed -e 's/^..../ffff/' | xauth -f $XAUTH nmerge -
}

function account_generate {
  
    OUTFILE="preload/create_user.sh"
    CUSERNAME=$(id -un)
    CUID=$(id -u)
    CPGID=$(id -g)
    CPGIDNAME=$(cat /etc/group | grep "${CPGID}:")
    cat /etc/group |grep $CUSERNAME|tr ':' ' '|awk '{printf("groupadd -og %d g%d\n",$3,$3)}' > $OUTFILE
    CUSERGROUP=$(cat /etc/group | grep $CUSERNAME  | tr ":" " " | awk '{ print $3}' | tr '\n' ',' | sed s/.$//)
    echo "mkdir -p $(dirname $HOME)" >> $OUTFILE 
    echo "useradd -o -b / -d $HOME -m -G ${CUSERGROUP} -U -u $CUID $CUSERNAME" >> $OUTFILE
}

function usage_generatetext {
    
    keys=""

    local -n ITEM=$1
    for key in "${!ITEM[@]}"; do
        keys+="$key "
    done

    KEYS=$(echo $keys|tr ' ' '\n'|sort -b)

    for KEY in $KEYS; do
        VAL=${ITEM[$KEY]}
        echo " >   $KEY" "@" $VAL  
    done
  
}

function usage_show {
    
    echo "Usage : $(basename $0)"

    echo "Prepare a new container that includes MesaMild"
    (
        echo "> COD";     usage_generatetext MAIN_COMMAND; echo "@";
        echo "> DRIV";  usage_generatetext DRIVER_OPTIONS;     echo "@";
        echo "> CON";     usage_generatetext CONTAINER_SETUP; echo "@"
        echo "> INS";          usage_generatetext APPLICATIONS;      echo "@";
        echo "> COM";      usage_generatetext COMPILER_OPTIONS;  echo "@";
        echo "> IMA";            usage_generatetext IMAGE_OPTIONS;  echo "@";
    )  | column  -t -s '@'|cat|
    sed -e "s/>\ COD/$rou\ MAIN COMMAND/g" |
    sed -e "s/>\ COM/$ble\ BUILD - COMPILER OPTIONS/g" |
    sed -e "s/>\ DRIV/$ble\ BUILD - DRIVER OPTIONS/g"     |
    sed -e "s/>\ INS/$mar\ INSTALL OPTIONS/g"   |
    sed -e "s/>\ IMA/$ble\ BUILD - IMAGE OPTIONS/g"   |
    sed -e "s/>\ CON/$vio\ CONTAINER OPTIONS/g" |
    sed -e "s/\-\-\([-a-zA-Z0-9.,=]*\)/$sms\-\-\1${rms}/g" -e "s/>/\ /g" |
    sed -e "s/\*\*\(b[-a-zA-Z0-9.,=]*\)/$ble$sms\1${rms}/g" -e "s/>/\ /g" |
    sed -e "s/\*\*\(c[-a-zA-Z0-9.,=]*\)/$vio$sms\1${rms}/g" -e "s/>/\ /g" | 
    sed -e "s/\*\*\(i[-a-zA-Z0-9.,=]*\)/$mar$sms\1${rms}/g" -e "s/>/\ /g" |
    sed -e "s/\*\*\(s[-a-zA-Z0-9.,=]*\)/$mar$sms\1${rms}/g" -e "s/>/\ /g" |
    sed -e "s/\*\*\([-a-zA-Z0-9.,=]*\)/$rei$sms\1${rms}/g" -e "s/>/\ /g" 
    echo "$rei"

    exit -1
}

## CONTAINER
function container_create {
    container_name=$1
    shift
    image_name=$1
    shift
    PARAMETERS="$(container_setupparams $container_name $image_name) $@"
    echo "Creating container $container_name above $image_name, using $PARAMETERS"
    docker create --entrypoint /usr/bin/bash $PARAMETERS 
}

function container_commit {
    container_name=$1
    shift
    image_name=$1
    docker commit $container_name $image_name
}

function container_exists {
    container_name=$1
    docker container ls --all |grep -q $container_name
}

function container_stop {
    container_name=$1
    docker stop $container_name
}

function container_destroy {
    container_name=$1
    container_isrunning $container_name  && container_stop $container_name && container_wait $container_name 
    docker rm $container_name
}

function container_isrunning {
    image_name=$1
    docker ps | grep -q $image_name
}

function container_wait {
    container_name=$1
    docker wait $container_name
}
function container_start {
    container_name=$1
    docker start $container_name
}

function container_restart {
    container_name=$1
    docker restart $container_name
}

function container_switch_on {
    docker restart $container_name
}

function container_exec {
    container_name=$1
    shift
    command=$@
    docker exec $container_name $command
}

function container_setup {
    echo "Creating container, and launching install"
    container_name=$1
    container_exists $container_name && container_destroy $container_name; 
    container_create $container_name;
}

function container_setupparams {

    container_name=$1
    shift
    image_name=$1
    
    # Setup bindings (things to be passed to the container)

    BINDINGS=" -e XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR  -e DISPLAY=$DISPLAY -e XAUTHORITY=$XAUTH"
    
    BINDINGS+=" --name ${container_name} -h $HNAME"   
    for directory in ${VISIBLE_DIRECTORIES[*]};
    do
        BINDINGS+=" --volume=${directory}:${directory}:rw";
    done

    for device in ${DEVICE_DRIVERS[*]};
    do
        BINDINGS+=" --device=${device}:${device}:rw";
    done

    for socket in ${VISIBLE_SOCKETS[*]};
    do
        BINDINGS+=" --volume=${socket}:${socket}:rw";
    done
  
    BINDINGS+=" --privileged -it $image_name"

    echo "$BINDINGS"
}


function image_exists {
    image_name=$1
    docker image ls -a ${image_name}  |grep -q ${image_name}
}

function image_destroy {
    image_name=$1
    image_exists && docker image rm -f $image_name
}

function container_dumpdl {
    #image_name=$1
    image_exists $INAME||(
    echo "Image doesn't exist - will not dump data"; 
    exit -1 )
    
    CRID=$(docker container ls  --all |grep $INAME |head -1 |awk '{print $1}')
    
    [ -z "$CRID" ] || 
    (
        echo "Extracting files from container";
        [ -d preload/var/cache/pacman ] || mkdir -p preload/var/cache/pacman
        [ -d preload/usr/src/mesamild/mesa ] || mkdir -p preload/usr/src/mesamild/mesa
        docker cp ${CRID}:/var/cache/pacman/pkg preload/var/cache/pacman;
        docker cp ${CRID}:/usr/src/mesamild/mesa  preload/usr/src/mesamild
    )
}

function maincmd_update {
    # Create or start a container 
    container_dumpdl $INAME
    [ -d preload/usr/src/mesamild/mesa ] && (
        echo "Updating mesa"
        cd preload/usr/src/mesamild/mesa;
        git pull origin;
        cd ../../../../../
        )
    username=$(docker inspect $INAME -f  "{{index .Config.Labels \"bzh.kazhed.mild.username\"}}")
    dri=$(docker inspect $INAME -f  "{{index .Config.Labels \"bzh.kazhed.mild.buildcmd.dri_drivers\"}}")
    gal=$(docker inspect $INAME -f  "{{index .Config.Labels \"bzh.kazhed.mild.buildcmd.gallium_drivers\"}}")
    vul=$(docker inspect $INAME -f  "{{index .Config.Labels \"bzh.kazhed.mild.buildcmd.vukan_drivers\"}}")
    command_line=" --build-arg dri_drivers=$dri_drivers --build-arg vulkan_drivers=$vulkan_drivers --build-arg=gallium_drivers=$gallium_drivers --build-arg MY_USERNAME=$username"

    maincmd_prune
    maincmd_build $command_line
}

function main {

    OUTSCRIPT="$PLDAPP_BASEDIR/settings.sh"
    declare -n rVISIBLE_DIRECTORIES=VISIBLE_DIRECTORIES
    declare -n rDEVICE_DRIVERS=DEVICE_DRIVERS
    
   [ -z "$PARAMS" ] && echo "* Error no command specified *" && usage_show 
 
    main_command=""
    echo "" > $OUTSCRIPT
    

    for program_arg in ${PARAMS}; do
        if [ ${program_arg:0:2} = '--' ]; then
            PARG=${program_arg:2}
            P=$(echo $PARG|cut -d'=' -f1); V=1
            [ ${#P} -ne ${#PARG} ] && V=$(echo $PARG|cut -d'=' -f2)
       
            case $P in 
                add-dir) rVISIBLE_DIRECTORIES+="$V";;
                add-device) rDEVICE_DRIVERS+="$V";;
                *) eval "$P=$V";;
            esac
        else
            main_command="$program_arg"
        fi
        
        
    done
    
    
    case $main_command in 

    help) usage_show
        ;;

    build)    
    BUILD_ARGS="";mesa_version=$MESA_STABLE
    optimise=$OPTIMISE_DEFAULT;gallium_drivers="swrast";
    dri_drivers="''";wine_version=wine
    
    [ -n "$experimental" ]      && echo $experimental | grep -q "mesa" ; mesa_version="master"
    [ -n "$experimental" ]      && echo $experimental | grep -q "wine" && wine_version="wine-staging"
    [ -n "$experimental" ]      && echo $experimental | grep -q "llvm" && llvm="kerberizer" 
    [ -n "$clang" ]             && ( 
                                echo CC=/usr/bin/clang      >> $OUTSCRIPT
                                echo CXX=/usr/bin/clang++   >> $OUTSCRIPT
                                )
     [ -n "$optimise" ]          && (
                                # Compiler flags
                                native=0;lto=0;opt=0;
                                let "lto = (optimise & 8) == 8"
                                let "native = (optimise & 4) == 4"
                                let "opt = optimise & 3"
                                cflags="";ldflags="-Wl,--sort-common -Wl,-z,now"
                                [ $native -eq 1 ]   && cflags+="-march=native"
                                [ $lto -eq 1 ]      && cflags+="-fno-strict-aliasing -flto" && ldflags+=" -Wl,-flto"
                                [ $opt -gt 0 ]      && cflags+=" -O${opt}" && ldflags+=" -Wl,-O${opt}"
                                
                                echo "CFLAGS='$cflags'" >> $OUTSCRIPT
                                echo "CXXFLAGS='$cflags'" >> $OUTSCRIPT
                                echo "LDFLAGS='$ldflags'" >> $OUTSCRIPT
                                
                                )
    [ -n "$intel" ]             && dri_drivers="i965" && vulkan_drivers+=" intel" && build_tuning=1
    [ -n "$radeon" ]            && gallium_drivers+=" radeonsi " && vulkan_drivers+=" radeon" && build_tuning=1
    [ -n "$nouveau" ]           && gallium_drivers+=" nouveau " && build_tuning=1
    [ -n "$legacy" ]            && echo $legacy | grep -q "radeon" && gallium_drivers+=" r600" && build_tuning=1
    [ -n "$legacy" ]            && echo $legacy | grep -q "intel" && dri_drivers+=" i915" && build_tuning=1
    [ -n "$nine" ]              && wine_version="wine-staging-nine";     
    
  
    [ -z "$build_tuning" ] && dri_drivers="i965 i915" && gallium_drivers="r600 radeonsi nouveau" && vulkan_drivers="intel radeon" && vulkan=1
    
    vulkan_drivers=$(echo $vulkan_drivers| tr ' ' ',' | sed -e 's/=,/=/' -e 's/,$//' -e 's/,,/,/' )
    
    [ -z "$vulkan" ] && vulkan_drivers="''"
    
    BUILD_PARAM+=$(echo "dri_drivers=$dri_drivers" | tr ' ' ',' | sed -e 's/=,/=/' -e 's/,$//' -e 's/,,/,/')
    BUILD_PARAM+=" "
    BUILD_PARAM+=$(echo "gallium_drivers=$gallium_drivers" | tr ' ' ',' | sed -e 's/=,/=/' -e 's/,$//' -e 's/,,/,/g')
    BUILD_PARAM+=" vulkan_drivers=$vulkan_drivers"
    BUILD_PARAM+=" MY_USERNAME=$(whoami) "
    
    
    for arg in $BUILD_PARAM; do 
        BUILD_ARGS+="--build-arg $arg "
    done

    echo "WINE_VERSION=$wine_version" >> $OUTSCRIPT
    echo "MESA=$mesa_version" >> $OUTSCRIPT
 
        
        maincmd_build "$BUILD_ARGS"
        
        #Continue with installation
        install_parameters=""
        [ -z "$steam" ] || install_parameters+=" install_steam"
        [ -z "$rpcs3" ] || install_parameters+=" install_rpcs3"
        [ -z "$cemu" ]  || install_parameters+=" install_cemu"
        [ -z "$dolphin" ] || install_parameters+=" install_dolphin"
        [ -z "$citra" ] || install_parameters+=" install_citra"
        [ -z "$decaf" ]  || install_parameters+=" install_decaf"

        maincmd_install $install_parameters
        
    ;;
    install)
        install_parameters=""
        [ -z "$steam" ] || install_parameters+=" install_steam"
        [ -z "$rpcs3" ] || install_parameters+=" install_rpcs3"
        [ -z "$cemu" ]  || install_parameters+=" install_cemu"
        [ -z "$dolphin" ] || install_parameters+=" install_dolphin"
        [ -z "$citra" ] || install_parameters+=" install_citra"
        [ -z "$decaf" ]  || install_parameters+=" install_decaf"

        maincmd_install $install_parameters
    ;;
    start)
        maincmd_start
    ;;
    update)
        maincmd_update
    ;;
    prune)
        maincmd_prune
    ;;
    configure)
        maincmd_configure
    ;;
    dump)
        maincmd_dump
    ;;
    uphelper)
        maincmd_uphelper
    ;;
    *)
        usage_show
    ;;
    esac
        
}

function maincmd_uphelper {
    
    # Charger les helpers dans l'image via de multiples creation / destruction de container 
    image_exists $INAME || (echo "Image do not exist, did you experience an issue while building it?" ; exit -1)
    echo "Updating helpers"
    SRC=helpers

    tar Ccf $SRC - ../$SRC/ |docker run  -i --name ${CNAME} $INAME sudo tar x --strip-component 1 -C /launcher
    echo "Commiting changes"
    container_commit $CNAME $INAME
    container_destroy $CNAME
    docker run --name ${CNAME} $INAME bash
    container_commit $CNAME $INAME
    container_destroy $CNAME
}


 function maincmd_build {

    image_exists $INAME && echo "Image already exits, either update it, or clean it with '$0 update' or  '$0 prune'"
    parameters="$@"
    account_generate
    echo "Parametres de construction :"
    echo $parameters
    docker build --pull -t $INAME  $parameters .
 }
 
 function maincmd_prune {
    
    #image_exists $INAME || (echo "Nothing to do" ; exit 0)
    docker images | grep $INAME |awk '{print "docker rmi "$3}' | bash
    docker images | grep $CNAME |awk '{print "docker rmi "$3}' | bash   
 
}
 
function maincmd_configure {
    
    maincmd_configure_cemu
    #image_name=$1
    #shift
    #image_exists $image_name || (echo "Image do not exist, did you experience an issue while building it?" ; exit -1)
    #parameters="$(container_setupparams) $@"
    #socket_setup
    #container_setup
}

#TextMode Install
function maincmd_install {
 
    image_exists $INAME || (echo "Image do not exist, did you experience an issue while building it?" ; exit -1)
    parameters="$@"
    
    
    echo $parameters | grep -q install_steam      &&  maincmd_install_steam
    echo $parameters | grep -q install_rpcs3      &&  maincmd_install_rpcs3
    echo $parameters | grep -q install_citra      &&  maincmd_install_citra
    echo $parameters | grep -q install_dolphin    &&  maincmd_install_dolphin
    echo $parameters | grep -q install_decaf      &&  maincmd_install_decaf
    echo $parameters | grep -q install_cemu       &&  maincmd_install_cemu
}

# function maincmd_install_steam {
# 
#     echo "Installing Steam"
#     docker run --name $CNAME -it --entrypoint /usr/bin/bash $INAME "$APP_BASEDIR/steam.sh"
#     echo "Commiting image"
#     docker commit $CNAME ${INAME}:steam
#     container_destroy $CNAME
#     echo "Done"
# }
# 
 function maincmd_install_dolphin {
 
     echo "Installing Dolphin"
     docker run --name $CNAME -it --entrypoint /usr/bin/bash $INAME "$APP_BASEDIR/dolphin.sh"
     echo "Commiting image"
     docker commit $CNAME ${INAME}:dolphin
     container_destroy $CNAME
     echo "Done"
 }
 
 function maincmd_install_citra {
 
     echo "Installing Citra"
     docker run --name $CNAME -it --entrypoint /usr/bin/bash $INAME "$APP_BASEDIR/citra.sh"
     echo "Commiting image"
     docker commit $CNAME ${INAME}:citra
     container_destroy $CNAME
     echo "Done"
 }
 
# function maincmd_install_decaf {
# 
#     echo "Installing Decaf"
#     docker run --name $CNAME -it --entrypoint /usr/bin/bash $INAME "$APP_BASEDIR/decaf.sh"
#     echo "Commiting image"
#     docker commit $CNAME ${INAME}:decaf
#     container_destroy $CNAME
#     echo "Done"
# }
# 
# function maincmd_install_rpcs3 {
# 
#     echo "Installing Rpcs3"
#     docker run --name $CNAME -it --entrypoint /usr/bin/bash $INAME "$APP_BASEDIR/rpcs3.sh"
#     echo "Commiting image"
#     docker commit $CNAME ${INAME}:rpcs3
#     container_destroy $CNAME
#     echo "Done"
# }

function maincmd_install_cemu {

    # This needs a graphical setup 
    echo "Installing Cemu"
    docker tag ${INAME}:latest ${INAME}:cemu
    #docker run --env phase=setup --name $CNAME -v $HOME:$HOME:rw -it --entrypoint /usr/bin/bash $INAME "$APP_BASEDIR/cemu.sh" 
    #echo "Commiting image"
    #docker commit $CNAME ${INAME}:cemu
    #container_destroy $CNAME
    #echo "Done"
}


function maincmd_configure_cemu {
    image_name="${INAME}:cemu" 
    container_name="${CNAME}-cemu"
    container_exists $container_name && ( 
                                            echo "removing previous container";
                                            container_destroy $container_name;
                                        )
    socket_setup && container_create $container_name $image_name "$@ $APP_BASEDIR/cemu.sh "
}

function maincmd_start_cemu {
    
    image_name="${INAME}:cemu" 
    container_name="${CNAME}-cemu"
    
    container_exists $container_name || ( echo "You must configure a container before running it: $0 configure --cemu"; exit -1)
    socket_setup
    
    container_exists $container_name && container_isrunning $container_name && container_restart $container_name && return
    container_exists $container_name && container_start $container_name && return

}

function maincmd_start {
   maincmd_start_cemu 
}


PARAMS=$@
main
exit

